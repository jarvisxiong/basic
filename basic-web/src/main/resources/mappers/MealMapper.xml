<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.duantuke.basic.mappers.MealMapper" >
  
  <resultMap id="BaseResultMap" type="com.duantuke.basic.po.Meal" >
    <result column="sku_id" property="skuId" jdbcType="BIGINT" />
    <result column="meat_vegetable" property="meatVegetable" jdbcType="VARCHAR" />
    <result column="cost" property="cost" jdbcType="DECIMAL" />
    <result column="price" property="price" jdbcType="DECIMAL" />
    <result column="suggest_price" property="suggestPrice" jdbcType="DECIMAL" />
    <result column="people_number" property="peopleNumber" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_by" property="createBy" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="pics" property="pics" jdbcType="VARCHAR" />
    <result column="descrition" property="descrition" jdbcType="VARCHAR" />
    <result column="supplier_id" property="supplierId" jdbcType="BIGINT" />
    <result column="supplier_name" property="supplierName" jdbcType="VARCHAR" />
    <result column="memo" property="memo" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="BaseResultMap1" type="com.duantuke.basic.esbean.input.MealInputBean" >
    <result column="sku_id" property="skuId" jdbcType="BIGINT" />
    <result column="meat_vegetable" property="meatVegetable" jdbcType="VARCHAR" />
    <result column="cost" property="cost" jdbcType="DECIMAL" />
    <result column="price" property="price" jdbcType="DECIMAL" />
    <result column="suggest_price" property="suggestPrice" jdbcType="DECIMAL" />
    <result column="people_number" property="peopleNumber" jdbcType="INTEGER" />
    
    <result column="meal_rank_id" property="mealRankId" jdbcType="BIGINT" />
    <result column="meal_id" property="mealId" jdbcType="BIGINT" />
    <result column="rank" property="rank" jdbcType="INTEGER" />
    <result column="consume" property="consume" jdbcType="INTEGER" />
    <result column="comment" property="comment" jdbcType="INTEGER" />
    <result column="travel" property="travel" jdbcType="INTEGER" />
    
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="pics" property="pics" jdbcType="VARCHAR" />
    <result column="descrition" property="descrition" jdbcType="VARCHAR" />
    <result column="supplier_id" property="supplierId" jdbcType="BIGINT" />
    <result column="supplier_name" property="supplierName" jdbcType="VARCHAR" />
    <result column="memo" property="memo" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    m.sku_id, m.meat_vegetable, m.cost, m.price, m.suggest_price, m.people_number, m.create_time, m.create_by, 
    m.update_time, m.update_by,s.`name`,s.`type`,s.pics,s.descrition,s.supplier_id,s.supplier_name,s.memo
  </sql>
  <sql id="Join_Column_List" >
    m.sku_id, m.meat_vegetable, m.cost, m.price, m.suggest_price, m.people_number, m.create_time, m.create_by, 
    m.update_time, m.update_by
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.duantuke.basic.po.MealExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from meal m left join skus s on m.sku_id = s.sku_id
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart >=0" >
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.duantuke.basic.po.MealExample" >
    delete from meal
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.duantuke.basic.po.Meal" >
    insert into meal (sku_id, meat_vegetable, cost, 
      price, suggest_price, people_number, 
      create_time, create_by, update_time, 
      update_by)
    values (#{skuId,jdbcType=BIGINT}, #{meatVegetable,jdbcType=VARCHAR}, #{cost,jdbcType=DECIMAL}, 
      #{price,jdbcType=DECIMAL}, #{suggestPrice,jdbcType=DECIMAL}, #{peopleNumber,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{updateBy,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.duantuke.basic.po.Meal" >
    insert into meal
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="skuId != null" >
        sku_id,
      </if>
      <if test="meatVegetable != null" >
        meat_vegetable,
      </if>
      <if test="cost != null" >
        cost,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="suggestPrice != null" >
        suggest_price,
      </if>
      <if test="peopleNumber != null" >
        people_number,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createBy != null" >
        create_by,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="updateBy != null" >
        update_by,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="skuId != null" >
        #{skuId,jdbcType=BIGINT},
      </if>
      <if test="meatVegetable != null" >
        #{meatVegetable,jdbcType=VARCHAR},
      </if>
      <if test="cost != null" >
        #{cost,jdbcType=DECIMAL},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="suggestPrice != null" >
        #{suggestPrice,jdbcType=DECIMAL},
      </if>
      <if test="peopleNumber != null" >
        #{peopleNumber,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null" >
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null" >
        #{updateBy,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.duantuke.basic.po.MealExample" resultType="java.lang.Integer" >
    select count(*) from meal
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update meal
    <set >
      <if test="record.skuId != null" >
        sku_id = #{record.skuId,jdbcType=BIGINT},
      </if>
      <if test="record.meatVegetable != null" >
        meat_vegetable = #{record.meatVegetable,jdbcType=VARCHAR},
      </if>
      <if test="record.cost != null" >
        cost = #{record.cost,jdbcType=DECIMAL},
      </if>
      <if test="record.price != null" >
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.suggestPrice != null" >
        suggest_price = #{record.suggestPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.peopleNumber != null" >
        people_number = #{record.peopleNumber,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createBy != null" >
        create_by = #{record.createBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null" >
        update_by = #{record.updateBy,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update meal
    set sku_id = #{record.skuId,jdbcType=BIGINT},
      meat_vegetable = #{record.meatVegetable,jdbcType=VARCHAR},
      cost = #{record.cost,jdbcType=DECIMAL},
      price = #{record.price,jdbcType=DECIMAL},
      suggest_price = #{record.suggestPrice,jdbcType=DECIMAL},
      people_number = #{record.peopleNumber,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="queryEsInputMeals" resultMap="BaseResultMap1">
    SELECT 
    <include refid="Join_Column_List" />
    ,r.meal_rank_id,r.rank,r.consume,r.comment,r.travel
    ,s.name,s.pics,s.descrition,s.supplier_id,s.supplier_name,s.memo
    from 
    (meal m
    LEFT JOIN meal_rank r ON m.sku_id = r.meal_id) JOIN skus s ON m.sku_id = s.sku_id
    where s.type=2
    <if test="mealId != null" >
      and m.sku_id = #{mealId}
    </if>
  </select>
</mapper>