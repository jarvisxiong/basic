<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.duantuke.basic.mappers.UserTokenMapper" >
  <resultMap id="BaseResultMap" type="com.duantuke.basic.po.UserToken" >
    <id column="token_id" property="tokenId" jdbcType="BIGINT" />
    <result column="mid" property="mid" jdbcType="BIGINT" />
    <result column="expire_time" property="expireTime" jdbcType="TIMESTAMP" />
    <result column="token" property="token" jdbcType="VARCHAR" />
    <result column="token_sort" property="tokenSort" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="SMALLINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    token_id, mid, expire_time, token, token_sort, type
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.duantuke.basic.po.UserTokenExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart >=0" >
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from user_token
    where token_id = #{tokenId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from user_token
    where token_id = #{tokenId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.duantuke.basic.po.UserTokenExample" >
    delete from user_token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.duantuke.basic.po.UserToken" >
    insert into user_token (token_id, mid, expire_time, 
      token, token_sort, type
      )
    values (#{tokenId,jdbcType=BIGINT}, #{mid,jdbcType=BIGINT}, #{expireTime,jdbcType=TIMESTAMP}, 
      #{token,jdbcType=VARCHAR}, #{tokenSort,jdbcType=INTEGER}, #{type,jdbcType=SMALLINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.duantuke.basic.po.UserToken" >
    insert into user_token
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="tokenId != null" >
        token_id,
      </if>
      <if test="mid != null" >
        mid,
      </if>
      <if test="expireTime != null" >
        expire_time,
      </if>
      <if test="token != null" >
        token,
      </if>
      <if test="tokenSort != null" >
        token_sort,
      </if>
      <if test="type != null" >
        type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="tokenId != null" >
        #{tokenId,jdbcType=BIGINT},
      </if>
      <if test="mid != null" >
        #{mid,jdbcType=BIGINT},
      </if>
      <if test="expireTime != null" >
        #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="token != null" >
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="tokenSort != null" >
        #{tokenSort,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=SMALLINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.duantuke.basic.po.UserTokenExample" resultType="java.lang.Integer" >
    select count(*) from user_token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update user_token
    <set >
      <if test="record.tokenId != null" >
        token_id = #{record.tokenId,jdbcType=BIGINT},
      </if>
      <if test="record.mid != null" >
        mid = #{record.mid,jdbcType=BIGINT},
      </if>
      <if test="record.expireTime != null" >
        expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.token != null" >
        token = #{record.token,jdbcType=VARCHAR},
      </if>
      <if test="record.tokenSort != null" >
        token_sort = #{record.tokenSort,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=SMALLINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update user_token
    set token_id = #{record.tokenId,jdbcType=BIGINT},
      mid = #{record.mid,jdbcType=BIGINT},
      expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
      token = #{record.token,jdbcType=VARCHAR},
      token_sort = #{record.tokenSort,jdbcType=INTEGER},
      type = #{record.type,jdbcType=SMALLINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.duantuke.basic.po.UserToken" >
    update user_token
    <set >
      <if test="mid != null" >
        mid = #{mid,jdbcType=BIGINT},
      </if>
      <if test="expireTime != null" >
        expire_time = #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="token != null" >
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="tokenSort != null" >
        token_sort = #{tokenSort,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=SMALLINT},
      </if>
    </set>
    where token_id = #{tokenId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.duantuke.basic.po.UserToken" >
    update user_token
    set mid = #{mid,jdbcType=BIGINT},
      expire_time = #{expireTime,jdbcType=TIMESTAMP},
      token = #{token,jdbcType=VARCHAR},
      token_sort = #{tokenSort,jdbcType=INTEGER},
      type = #{type,jdbcType=SMALLINT}
    where token_id = #{tokenId,jdbcType=BIGINT}
  </update>
</mapper>